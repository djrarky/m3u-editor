<?php

namespace App\Http\Controllers;

use DOMDocument;
use XMLReader;
use App\Enums\ChannelLogoType;
use App\Enums\PlaylistChannelId;
use App\Models\CustomPlaylist;
use App\Models\Epg;
use App\Models\MergedPlaylist;
use App\Models\Playlist;
use App\Services\EpgCacheService;
use Carbon\Carbon;
use Filament\Notifications\Notification;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class EpgGenerateController extends Controller
{
    /**
     * File cache configuration
     */
    private const CACHE_TTL_HOURS = 12; // Cache files for 12 hours

    /**
     * Generate the EPG XML file
     *
     * @param string $uuid
     * @return \Illuminate\Http\Response
     */
    public function __invoke(string $uuid)
    {
        // Fetch the playlist
        $playlist = Playlist::where('uuid', $uuid)->first();
        if (!$playlist) {
            $playlist = MergedPlaylist::where('uuid', $uuid)->first();
        }
        if (!$playlist) {
            $playlist = CustomPlaylist::where('uuid', $uuid)->firstOrFail();
        }

        // Check if we have a valid cached file
        if ($this->isCacheValid($playlist, false)) {
            return $this->serveCachedFile($playlist, false);
        }

        // Generate and cache new file
        return $this->generateAndCache($playlist, false);
    }

    /**
     * Generate the EPG XML file and compress it
     *
     * @param string $uuid
     * @return \Illuminate\Http\Response
     */
    public function compressed(string $uuid)
    {
        // Fetch the playlist
        $playlist = Playlist::where('uuid', $uuid)->first();
        if (!$playlist) {
            $playlist = MergedPlaylist::where('uuid', $uuid)->first();
        }
        if (!$playlist) {
            $playlist = CustomPlaylist::where('uuid', $uuid)->firstOrFail();
        }

        // Check if we have a valid cached file
        if ($this->isCacheValid($playlist, true)) {
            return $this->serveCachedFile($playlist, true);
        }

        // Generate and cache new file
        return $this->generateAndCache($playlist, true);
    }

    /**
     * Generate the EPG XML file contents
     *
     * @param Playlist|MergedPlaylist|CustomPlaylist $playlist
     */
    private function generate($playlist)
    {
        // Output the XML header
        echo '<?xml version="1.0" encoding="UTF-8"?>
<tv generator-info-name="Generated by m3u editor" generator-info-url="' . url('') . '">';
        echo PHP_EOL;

        // Set up the channels
        $epgChannels = [];
        $dummyEpgChannels = [];
        $channels = $playlist->channels()
            ->where('enabled', true)
            ->orderBy('sort')
            ->orderBy('channel')
            ->orderBy('title')
            ->cursor();

        // Get playlist settings
        $channelNumber = $playlist->auto_channel_increment ? $playlist->channel_start - 1 : 0;
        $idChannelBy = $playlist->id_channel_by;
        $dummyEpgEnabled = $playlist->dummy_epg;
        $dummyEpgLength = (int)($playlist->dummy_epg_length ?? 120); // Default to 120 minutes if not set
        $proxyEnabled = $playlist->enable_proxy;

        // Generate `<channel>` tags for each channel
        foreach ($channels as $channel) {
            // Get/set the channel number
            $channelNo = $channel->channel;
            if (!$channelNo && ($playlist->auto_channel_increment || $idChannelBy === PlaylistChannelId::ChannelId)) {
                $channelNo = ++$channelNumber;
            }

            // Get the `tvg-id` based on the playlist setting
            switch ($idChannelBy) {
                case PlaylistChannelId::ChannelId:
                    $tvgId = $channelNo;
                    break;
                case PlaylistChannelId::Name:
                    $tvgId = $channel->name_custom ?? $channel->name;
                    break;
                case PlaylistChannelId::Title:
                    $tvgId = $channel->title_custom ?? $channel->title;
                    break;
                default:
                    $tvgId = $channel->stream_id_custom ?? $channel->stream_id;
                    break;
            }

            // Make sure TVG ID only contains characters and numbers
            $tvgId = preg_replace(config('dev.tvgid.regex'), '', $tvgId);

            // Output the <channel> tag
            $title = $channel->title_custom ?? $channel->title;
            $title = htmlspecialchars($title);

            // Get the EPG channel data
            $epgData = $channel->epgChannel ?? null;

            // Output the <channel> tag
            if ($epgData) {
                // Keep track of which EPGs have which channels mapped
                // Need this to output the <programme> tags later
                if (!array_key_exists($epgData->epg_id, $epgChannels)) {
                    $epgChannels[$epgData->epg_id] = [];
                }
                $epgChannels[$epgData->epg_id][] = [$epgData->channel_id => $tvgId];

                // Get the icon
                $icon = '';
                if ($channel->logo_type === ChannelLogoType::Epg) {
                    $icon = $epgData->icon ?? '';
                } elseif ($channel->logo_type === ChannelLogoType::Channel) {
                    $icon =  $channel->logo ?? $channel->logo_internal ?? '';
                }
                if (empty($icon)) {
                    $icon = url('/placeholder.png');
                }
                if ($proxyEnabled) {
                    $icon = LogoProxyController::generateProxyUrl($icon);
                }

                // Output the <channel> tag
                echo '  <channel id="' . $tvgId . '">' . PHP_EOL;
                echo '    <display-name lang="' . $epgData->lang . '">' . $title . '</display-name>';
                if ($channelNo !== null) {
                    echo '    <display-name>' . $channelNo . '</display-name>';
                }
                if ($icon) {
                    echo PHP_EOL . '    <icon src="' . htmlspecialchars($icon) . '"/>';
                }
                echo PHP_EOL . '  </channel>' . PHP_EOL;
            } else if ($dummyEpgEnabled) {
                // Get the icon
                $icon = $channel->logo ?? $channel->logo_internal ?? '';
                if (empty($icon)) {
                    $icon = url('/placeholder.png');
                }
                $icon = htmlspecialchars($icon);
                if ($proxyEnabled) {
                    $icon = LogoProxyController::generateProxyUrl($icon);
                }

                // Keep track of which channels need a dummy EPG program
                // Need this to output the <programme> tags later
                $dummyEpgChannels[] = [
                    'tvg_id' => $tvgId,
                    'channel_id' => $channel->id,
                    'channel_no' => $channelNo,
                    'title' => $title,
                    'icon' => $icon,
                    'group' => $channel->group ?? $channel->group_internal,
                    'include_category' => $playlist->dummy_epg_category,
                ];

                // Output the <channel> tag
                echo '  <channel id="' . $tvgId . '">' . PHP_EOL;
                echo '    <display-name>' . $title . '</display-name>';
                if ($channelNo !== null) {
                    echo PHP_EOL . '    <display-name>' . $channelNo . '</display-name>';
                }
                if ($icon) {
                    echo PHP_EOL . '    <icon src="' . $icon . '"/>';
                }
                echo PHP_EOL . '  </channel>' . PHP_EOL;
            }
        }

        // Fetch the EPGs (channels are keyed by EPG ID)
        $epgs = Epg::whereIn('id', array_keys($epgChannels))
            ->get();

        // Initialize cache service
        $cacheService = new EpgCacheService();

        // Loop through the EPGs and output the <programme> tags
        foreach ($epgs as $epg) {
            // Channel data
            $channels = $epgChannels[$epg->id];

            // Skip if no channels
            if (!count($channels)) {
                continue;
            }

            try {
                // Try to use cached data first
                // if ($cacheService->isCacheValid($epg)) {
                // Do a quick check instead of fetching metadata and parsing
                // If flagged as cached, use the cache
                if ($epg->is_cached) {
                    // Get all programmes from cache (last 1 day to next 5 days for EPG generation)
                    $startDate = Carbon::now()->subDays(1)->format('Y-m-d');
                    $endDate = Carbon::now()->addDays(5)->format('Y-m-d');

                    // Get all channel IDs that this EPG should map to
                    $epgChannelIds = [];
                    foreach ($channels as $channelMapping) {
                        $epgChannelIds = array_merge($epgChannelIds, array_keys($channelMapping));
                    }

                    // Get programmes from cache for date range
                    $cachedProgrammes = $cacheService->getCachedProgrammesRange($epg, $startDate, $endDate, $epgChannelIds);

                    // Output programmes from cache
                    foreach ($cachedProgrammes as $channelId => $programmes) {
                        foreach ($programmes as $programme) {
                            // Find matching channels for this EPG channel ID
                            $filtered = array_filter($channels, fn($ch) => array_key_exists($channelId, $ch));
                            if (!count($filtered)) {
                                continue;
                            }

                            foreach ($filtered as $ch) {
                                $mappedChannelId = $ch[$channelId];

                                // Format times for XMLTV
                                $start = $this->formatXmltvDateTime($programme['start']);
                                $stop = $this->formatXmltvDateTime($programme['stop']);

                                // Output programme tag
                                echo '  <programme channel="' . htmlspecialchars($mappedChannelId) . '"';
                                if ($start) echo ' start="' . $start . '"';
                                if ($stop) echo ' stop="' . $stop . '"';
                                echo '>' . PHP_EOL;

                                if ($programme['title']) {
                                    echo '    <title>' . htmlspecialchars($programme['title']) . '</title>' . PHP_EOL;
                                }
                                if ($programme['subtitle']) {
                                    echo '    <sub-title>' . htmlspecialchars($programme['subtitle']) . '</sub-title>' . PHP_EOL;
                                }
                                if ($programme['desc']) {
                                    echo '    <desc>' . htmlspecialchars($programme['desc']) . '</desc>' . PHP_EOL;
                                }
                                if ($programme['category']) {
                                    echo '    <category>' . htmlspecialchars($programme['category']) . '</category>' . PHP_EOL;
                                }
                                if ($programme['episode_num']) {
                                    echo '    <episode-num system="xmltv_ns">' . htmlspecialchars($programme['episode_num']) . '</episode-num>' . PHP_EOL;
                                }
                                if ($programme['icon']) {
                                    $icon = htmlspecialchars($programme['icon']);
                                    if ($proxyEnabled) {
                                        $icon = LogoProxyController::generateProxyUrl($icon);
                                    }
                                    echo '    <icon src="' . $icon . '"/>' . PHP_EOL;
                                }
                                if ($programme['rating']) {
                                    echo '    <rating><value>' . htmlspecialchars($programme['rating']) . '</value></rating>' . PHP_EOL;
                                }
                                if (!empty($programme['new']) && $programme['new']) {
                                    echo '    <premiere/>' . PHP_EOL;
                                }

                                echo '  </programme>' . PHP_EOL;
                            }
                        }
                    }
                } else {
                    // Fallback to original XML reading if cache is not available
                    $this->processEpgWithXmlReader($epg, $channels, $playlist);
                }
            } catch (\Exception $e) {
                // If cache fails, fallback to original XML reading
                $this->processEpgWithXmlReader($epg, $channels, $playlist);
            }
        }

        // If dummy EPG channels, generate dummy programmes
        if (count($dummyEpgChannels) > 0) {
            foreach ($dummyEpgChannels as $dummyEpgChannel) {
                $tvgId = $dummyEpgChannel['tvg_id'];
                $title = $dummyEpgChannel['title'];
                $icon = $dummyEpgChannel['icon'];
                $channelNo = $dummyEpgChannel['channel_no'];
                $group = $dummyEpgChannel['group'];
                $includeCategory = $dummyEpgChannel['include_category'];

                // Generate dummy programmes for the specified length
                $startTime = Carbon::now()
                    ->startOf('day')
                    ->subMinutes($dummyEpgLength);

                // Generate 5 days worth of EPG data, based on the `$dummyEpgLength`, which is how long the programme should last in minutes
                for ($i = 0; $i < (5 * 24 * 60) / $dummyEpgLength; $i++) {
                    $startTime->addMinutes($dummyEpgLength);
                    $endTime = clone $startTime;
                    $endTime->addMinutes($dummyEpgLength);

                    // Format the start and end times
                    $start = str_replace(':', '', $startTime->format('YmdHis P'));
                    $end = str_replace(':', '', $endTime->format('YmdHis P'));

                    // Output the <programme> tag
                    echo '  <programme channel="' . $tvgId . '" start="' . $start . '" stop="' . $end . '">' . PHP_EOL;
                    echo '    <title>' . $title . '</title>' . PHP_EOL;
                    if ($icon) {
                        echo '    <icon src="' . $icon . '"/>' . PHP_EOL;
                    }
                    echo '    <desc>' . $title . '</desc>' . PHP_EOL;
                    if ($includeCategory) {
                        echo '    <category lang="en">' . $group . '</category>' . PHP_EOL;
                    }
                    echo '  </programme>' . PHP_EOL;
                }
            }
        }

        // Close it out
        echo '</tv>';
    }

    /**
     * Check if cache file is valid and not expired
     */
    private function isCacheValid($playlist, bool $compressed = false): bool
    {
        $cacheFilePath = EpgCacheService::getPlaylistEpgCachePath($playlist, $compressed);
        $disk = Storage::disk('local');

        if (!$disk->exists($cacheFilePath)) {
            return false;
        }

        // Check if file is older than TTL
        $cacheFileTime = $disk->lastModified($cacheFilePath);
        $expiryTime = now()->subHours(self::CACHE_TTL_HOURS)->timestamp;

        return $cacheFileTime >= $expiryTime;
    }

    /**
     * Serve cached file directly
     */
    private function serveCachedFile($playlist, bool $compressed = false)
    {
        $cacheFilePath = EpgCacheService::getPlaylistEpgCachePath($playlist, $compressed);
        $disk = Storage::disk('local');

        $filename = Str::slug($playlist->name) . ($compressed ? '.xml.gz' : '.xml');
        $contentType = $compressed ? 'application/gzip' : 'application/xml';

        return response()->stream(
            function () use ($disk, $cacheFilePath) {
                $stream = $disk->readStream($cacheFilePath);
                fpassthru($stream);
                fclose($stream);
            },
            200,
            [
                'Access-Control-Allow-Origin' => '*',
                'Content-Disposition' => "attachment; filename=\"$filename\"",
                'Content-Type' => $contentType,
                'X-EPG-Cache' => 'HIT'
            ]
        );
    }

    /**
     * Generate and cache EPG file
     */
    private function generateAndCache($playlist, bool $compressed = false)
    {
        $cacheFilePath = EpgCacheService::getPlaylistEpgCachePath($playlist, $compressed);
        $disk = Storage::disk('local');

        // Ensure cache directory exists
        $cacheDir = dirname($cacheFilePath);
        if (!$disk->exists($cacheDir)) {
            $disk->makeDirectory($cacheDir, 0755, true);
        }

        $filename = Str::slug($playlist->name) . ($compressed ? '.xml.gz' : '.xml');
        $contentType = $compressed ? 'application/gzip' : 'application/xml';

        if ($compressed) {
            // For compressed, generate content then compress and save
            ob_start();
            $this->generate($playlist);
            $content = ob_get_clean();
            $compressedContent = gzencode($content, 9);

            // Save to cache
            $disk->put($cacheFilePath, $compressedContent);

            return response($compressedContent, 200, [
                'Content-Type' => $contentType,
                'Content-Disposition' => "attachment; filename=\"$filename\"",
                'Access-Control-Allow-Origin' => '*',
                'X-EPG-Cache' => 'MISS'
            ]);
        } else {
            // For regular XML, stream while saving to cache
            return response()->stream(
                function () use ($playlist, $disk, $cacheFilePath) {
                    // Open a temporary stream to capture output
                    $tempStream = fopen('php://temp', 'r+');

                    // Capture output
                    ob_start();
                    $this->generate($playlist);
                    $content = ob_get_clean();

                    // Write to temp stream and cache file
                    fwrite($tempStream, $content);
                    $disk->put($cacheFilePath, $content);

                    // Output the content
                    rewind($tempStream);
                    fpassthru($tempStream);
                    fclose($tempStream);
                },
                200,
                [
                    'Access-Control-Allow-Origin' => '*',
                    'Content-Disposition' => "attachment; filename=\"$filename\"",
                    'Content-Type' => $contentType,
                    'X-EPG-Cache' => 'MISS'
                ]
            );
        }
    }

    /**
     * Gzip the file
     *
     * @param string $filename
     * @param string $disk
     * @param bool $delete_original
     * @return bool
     */
    private function gzip($filename, $disk = 'local', $delete_original = false)
    {
        $disk = Storage::disk($disk);
        $data = $disk->get($filename);
        $out_file = "$filename.gz";

        $gzdata = gzencode($data, 9);
        $disk->put($out_file, $gzdata);
        $fp = fopen($disk->path($out_file), "w");
        $result = fwrite($fp, $gzdata);
        fclose($fp);

        if ($result && $delete_original) {
            $disk->delete($filename);
        }

        return $result > 0;
    }

    /**
     * Format datetime for XMLTV format
     *
     * @param string $datetime ISO 8601 datetime string
     * @return string|null XMLTV formatted datetime
     */
    private function formatXmltvDateTime($datetime)
    {
        if (!$datetime) {
            return null;
        }

        try {
            $carbon = Carbon::parse($datetime);
            // Format as YYYYMMDDHHMMSS +ZZZZ
            return $carbon->format('YmdHis O');
        } catch (\Exception $e) {
            return null;
        }
    }

    /**
     * Process EPG using XMLReader (fallback method)
     *
     * @param Epg $epg
     * @param array $channels
     * @param mixed $playlist
     */
    private function processEpgWithXmlReader($epg, $channels, $playlist)
    {
        // Get the content
        $filePath = null;
        if ($epg->url && str_starts_with($epg->url, 'http')) {
            $filePath = Storage::disk('local')->path($epg->file_path);
        } else if ($epg->uploads && Storage::disk('local')->exists($epg->uploads)) {
            $filePath = Storage::disk('local')->path($epg->uploads);
        } else if ($epg->url) {
            $filePath = $epg->url;
        }

        if (!$filePath) {
            // Send notification
            $error = "Invalid EPG file. Unable to read or download an associated EPG file. Please check the URL or uploaded file and try again.";
            Notification::make()
                ->danger()
                ->title("Error generating epg data for playlist \"{$playlist->name}\" using EPG \"{$epg->name}\"")
                ->body($error)
                ->broadcast($epg->user);
            Notification::make()
                ->danger()
                ->title("Error generating epg data for playlist \"{$playlist->name}\" using EPG \"{$epg->name}\"")
                ->body($error)
                ->sendToDatabase($epg->user);
            return;
        }

        // Set up the reader
        $programReader = new XMLReader();
        $programReader->open('compress.zlib://' . $filePath);

        // Loop through the XML data
        while (@$programReader->read()) {
            // Only consider XML elements and programme nodes
            if ($programReader->nodeType == XMLReader::ELEMENT && $programReader->name === 'programme') {
                // Get the channel id
                $channelId = trim($programReader->getAttribute('channel'));
                if (!$channelId) {
                    continue;
                }

                // EPG could be applied to multiple channels, find all matching channels
                $filtered = array_filter($channels, fn($ch) => array_key_exists($channelId, $ch));
                if (!count($filtered)) {
                    continue;
                }
                // Channel program found, output the <programme> tag
                // First, we need to make sure the channel is correct
                // Replace `channel="<channel_id>"` with `channel="<stream_id>"`
                $itemDom = new DOMDocument();
                $itemDom->loadXML($programReader->readOuterXML());

                // Get the item element
                $item = $itemDom->documentElement;
                foreach ($filtered as $ch) {
                    // Modify the channel attribute
                    $item->setAttribute('channel', $ch[$channelId]);

                    // Output modified line
                    echo "  " . $itemDom->saveXML($item) . PHP_EOL;
                }
            }
        }
        // Close the XMLReader for this epg
        $programReader->close();
    }
}
